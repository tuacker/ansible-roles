#!/bin/bash

# Script to deploy the latest release (blue/green aware)

set -euo pipefail

# Helpers ----------------------------------------------------------------------
# Print echo messages in bold --------------------------------------------------
function bold_echo() {
  echo -e "\033[1m$1\033[0m"
}

# Determine active service -----------------------------------------------------
function determine_active_service() {
  ACTIVE_SERVICE_FILE_PATH="/etc/{{ deploy.service_name }}/active_service"
  ACTIVE_SERVICE=

  # If no active service was configured yet (i.e. first deploy) then use "blue"
  if [ ! -f "$ACTIVE_SERVICE_FILE_PATH" ]; then
    echo "green" > "$ACTIVE_SERVICE_FILE_PATH"
  fi

  read -r ACTIVE_SERVICE < "$ACTIVE_SERVICE_FILE_PATH"
}
# HELPERS ----------------------------------------------------------------------


# Set up our variables ---------------------------------------------------------
# Determine which (blue / green) is going to be active after deployment. -------
determine_active_service

NEW_SERVICE=

if [ "$ACTIVE_SERVICE" = "blue" ]; then
  NEW_SERVICE="green"
else
  NEW_SERVICE="blue"
fi

set -o allexport
. /etc/{{ deploy.service_name }}/{{ deploy.service_name }}_"$NEW_SERVICE"_env
set +o allexport

APP_DIR="/srv/app/{{ deploy.service_name }}_${NEW_SERVICE}"

bold_echo "===> Active Node is: ${ACTIVE_SERVICE} || New Node is: ${NEW_SERVICE}"
bold_echo "==="

# Ask node to get ready for shutdown (for example: stop processing jobs) -------
bold_echo "===> $ACTIVE_SERVICE | Asking the ACTIVE node to get ready for shutdown"
bold_echo "==="
env -i "/usr/local/bin/run_{{ deploy.service_name }}" rpc "{{ deploy.shutdown_rpc }}"

# Deploy new version ----------------------------------------------------------
bold_echo "===> $NEW_SERVICE | Deploying new app version"
bold_echo "==="
if [ ! -d "$APP_DIR" ]; then
  bold_echo "===> Creating $APP_DIR"
  bold_echo "==="
  mkdir -p $APP_DIR
  chown -R {{ deploy.service_name }}:{{ deploy.service_name }} $APP_DIR
fi

# copy all new files & make sure no longer existing files are deleted
rsync -a --delete \
      --chown={{ deploy.service_name }}:{{ deploy.service_name }} \
      "$HOME/{{ deploy.service_name }}/" $APP_DIR

# Enable and start new (blue/green) service ------------------------------------
bold_echo "===> $NEW_SERVICE | Enable: {{ deploy.service_name }}_${NEW_SERVICE}.service"
bold_echo "==="
systemctl enable "{{ deploy.service_name }}_${NEW_SERVICE}.service"

bold_echo "===> $NEW_SERVICE | Run preparation task for new node"
bold_echo "==="
"${APP_DIR}/bin/{{ deploy.service_name }}" eval "{{ deploy.prepare_eval }}"

# The above command may create some files, make sure permissions of APP_DIR are in tact.
chown -R {{ deploy.service_name }}:{{ deploy.service_name }} "$APP_DIR"

bold_echo "===> $NEW_SERVICE | Start: {{ deploy.service_name }}_${NEW_SERVICE}.service"
bold_echo "==="
systemctl start "{{ deploy.service_name }}_${NEW_SERVICE}.service"

# Make sure new node comes up right, otherwise abort ---------------------------
bold_echo "===> $NEW_SERVICE | Wait until node is responsive"
bold_echo "==="
NEXT_WAIT_TIME=0
MAX_WAIT_TIME=20
until curl "http://127.0.0.1:$PORT" > /dev/null 2>&1 || [ $NEXT_WAIT_TIME -eq $MAX_WAIT_TIME ]; do
  printf "."
  sleep $(( NEXT_WAIT_TIME++ ))
done

printf "\n"

if [ $NEXT_WAIT_TIME -eq $MAX_WAIT_TIME ]; then
  bold_echo "\033[0;31m********************************************************************************\033[0m"
  bold_echo "\033[0;31m********************************************************************************\033[0m"
  bold_echo "\033[0;31m**                                                                            **\033[0m"
  bold_echo "\033[0;31m**     New node failed to respond in the given time, ABORTING                 **\033[0m"
  bold_echo "\033[0;31m**                                                                            **\033[0m"
  bold_echo "\033[0;31m**     Manual actions required:                                               **\033[0m"
  bold_echo "\033[0;31m**     ========================                                               **\033[0m"
  bold_echo "\033[0;31m**                                                                            **\033[0m"
  bold_echo "\033[0;31m**       - Make sure the active node is in proper state.                      **\033[0m"
  bold_echo "\033[0;31m**       - Restart jobs, etc.                                                 **\033[0m"
  bold_echo "\033[0;31m**       - ROLL BACK migrations                                               **\033[0m"
  bold_echo "\033[0;31m**                                                                            **\033[0m"
  bold_echo "\033[0;31m**     See output above do determine the ACTIVE NODE.                         **\033[0m"
  bold_echo "\033[0;31m**                                                                            **\033[0m"
  bold_echo "\033[0;31m**                                                                            **\033[0m"
  bold_echo "\033[0;31m********************************************************************************\033[0m"
  bold_echo "\033[0;31m********************************************************************************\033[0m"

  systemctl stop "{{ deploy.service_name }}_${NEW_SERVICE}.service"
  systemctl disable "{{ deploy.service_name }}_${NEW_SERVICE}.service"

  exit 1
fi

# Update NGINX config and reload -----------------------------------------------
bold_echo "===> $NEW_SERVICE | NGINX: Link new service to sites-enabled"
bold_echo "==="
ln -sf "/etc/nginx/sites-available/${NEW_SERVICE}.{{ deploy.nginx_vhost }}" \
       "/etc/nginx/sites-enabled/{{ deploy.nginx_vhost }}"

bold_echo "===> $NEW_SERVICE | NGINX: Test & reload"
bold_echo "==="
nginx -t
systemctl reload nginx

# Stop and disable old (blue/green) service ------------------------------------
bold_echo "===> $ACTIVE_SERVICE | Stop: {{ deploy.service_name }}_${ACTIVE_SERVICE}.service"
bold_echo "==="
systemctl stop "{{ deploy.service_name }}_${ACTIVE_SERVICE}.service"

bold_echo "===> $ACTIVE_SERVICE | Disable: {{ deploy.service_name }}_${ACTIVE_SERVICE}.service"
bold_echo "==="
systemctl disable "{{ deploy.service_name }}_${ACTIVE_SERVICE}.service"

# Mark new (blue/green) service as active --------------------------------------
bold_echo "===> $NEW_SERVICE | Active: Set $NEW_SERVICE as active"
bold_echo "==="
echo "$NEW_SERVICE" > "$ACTIVE_SERVICE_FILE_PATH"

# Cleanup ----------------------------------------------------------------------
bold_echo "===> Cleanup"
bold_echo "==="
rm -rf "$HOME/{{ deploy.service_name }}"

bold_echo "==="
bold_echo "===> Done"

exit 0
