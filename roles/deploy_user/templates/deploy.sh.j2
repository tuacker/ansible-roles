#!/bin/bash

# Script to deploy the latest release (blue/green aware)

set -euo pipefail

# Helpers ----------------------------------------------------------------------
# Print messages in bold
function pretty_bold() {
  printf "\033[1m$1\033[0m"
}

# Print messages in bold and red
function pretty_red() {
  printf "\033[1m\033[0;31m$1\033[0m"
}

# Pretty header "===> msg ====="
function pretty_header() {
  printf '\n\033[1m%.80s\033[0m\n' "$1 $(printf '%.1s' *{1..80})"
}

# Determine active service -----------------------------------------------------
function determine_active_service() {
  ACTIVE_SERVICE_FILE_PATH="/etc/{{ deploy.service_name }}/active_service"
  ACTIVE_SERVICE=

  # If no active service was configured yet (i.e. first deploy) then use "blue"
  if [ ! -f "$ACTIVE_SERVICE_FILE_PATH" ]; then
    echo "green" > "$ACTIVE_SERVICE_FILE_PATH"
  fi

  read -r ACTIVE_SERVICE < "$ACTIVE_SERVICE_FILE_PATH"
}
# HELPERS ----------------------------------------------------------------------

NEW_RELEASE_DIR="$HOME/{{ deploy.service_name }}/"

if [ ! -d "$NEW_RELEASE_DIR" ]; then
  pretty_red "Could not find release at ${NEW_RELEASE_DIR} - aborting"
  exit 1
fi


# Set up our variables ---------------------------------------------------------
# Determine which (blue / green) is going to be active after deployment. -------
determine_active_service

NEW_SERVICE=

if [ "$ACTIVE_SERVICE" = "blue" ]; then
  NEW_SERVICE="green"
else
  NEW_SERVICE="blue"
fi

set -o allexport
. /etc/{{ deploy.service_name }}/{{ deploy.service_name }}_"$NEW_SERVICE"_env
set +o allexport

APP_DEPLOY_DIR="/srv/app/{{ deploy.service_name }}_${NEW_SERVICE}"

pretty_bold "[${ACTIVE_SERVICE}] is active & [${NEW_SERVICE}] is new\n"

# Ask node to get ready for shutdown (for example: stop processing jobs) -------
pretty_header "[${ACTIVE_SERVICE}] Asking the active node to get ready for shutdown"
"/usr/local/bin/run_{{ deploy.service_name }}" rpc "{{ deploy.shutdown_rpc }}"

# Deploy new version ----------------------------------------------------------
pretty_header "[${NEW_SERVICE}] Deploying new app version"
if [ ! -d "$APP_DEPLOY_DIR" ]; then
  pretty_header "Creating $APP_DEPLOY_DIR"

  mkdir -p $APP_DEPLOY_DIR
  chown -R {{ deploy.service_name }}:{{ deploy.service_name }} $APP_DEPLOY_DIR
fi

# copy all new files & make sure no longer existing files are deleted
rsync -a --delete \
      --chown={{ deploy.service_name }}:{{ deploy.service_name }} \
      "$NEW_RELEASE_DIR" $APP_DEPLOY_DIR

# Enable and start new (blue/green) service ------------------------------------
pretty_header "[${NEW_SERVICE}] Enable: {{ deploy.service_name }}_${NEW_SERVICE}.service"
systemctl enable "{{ deploy.service_name }}_${NEW_SERVICE}.service"

pretty_header "[${NEW_SERVICE}] Run preparation task for new node"
"${APP_DEPLOY_DIR}/bin/{{ deploy.service_name }}" eval "{{ deploy.prepare_eval }}"

# The above command may create some files, make sure permissions of APP_DEPLOY_DIR are in tact.
chown -R {{ deploy.service_name }}:{{ deploy.service_name }} "$APP_DEPLOY_DIR"

pretty_header "[${NEW_SERVICE}] Start: {{ deploy.service_name }}_${NEW_SERVICE}.service"
systemctl start "{{ deploy.service_name }}_${NEW_SERVICE}.service"

# Make sure new node comes up right, otherwise abort ---------------------------
pretty_header "[${NEW_SERVICE}] Wait until node is responsive"
ATTEMPT=0
MAX_ATTEMPTS=120

until curl "http://127.0.0.1:$PORT" > /dev/null 2>&1 || [ $ATTEMPT -eq $MAX_ATTEMPTS ]; do
  printf "."
  sleep 1s
  ATTEMPT=$((ATTEMPT+1))
done

printf "\n"

if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
  pretty_red "********************************************************************************"
  pretty_red "********************************************************************************"
  pretty_red "**                                                                            **"
  pretty_red "**     New node failed to respond in the given time - aborting                **"
  pretty_red "**                                                                            **"
  pretty_red "**     Manual actions required:                                               **"
  pretty_red "**     ========================                                               **"
  pretty_red "**                                                                            **"
  pretty_red "**       - Make sure the active node is in proper state.                      **"
  pretty_red "**       - Restart jobs, etc.                                                 **"
  pretty_red "**       - ROLL BACK migrations                                               **"
  pretty_red "**                                                                            **"
  pretty_red "**     See output above do determine the ACTIVE NODE.                         **"
  pretty_red "**                                                                            **"
  pretty_red "**                                                                            **"
  pretty_red "********************************************************************************"
  pretty_red "********************************************************************************"

  systemctl stop "{{ deploy.service_name }}_${NEW_SERVICE}.service"
  systemctl disable "{{ deploy.service_name }}_${NEW_SERVICE}.service"

  exit 1
fi

# Update NGINX config and reload -----------------------------------------------
pretty_header "[${NEW_SERVICE}] NGINX: Link new service to sites-enabled"
ln -sf "/etc/nginx/sites-available/${NEW_SERVICE}.{{ deploy.nginx_vhost }}" \
       "/etc/nginx/sites-enabled/{{ deploy.nginx_vhost }}"

pretty_header "[${NEW_SERVICE}] NGINX: Test & reload"
nginx -t
systemctl reload nginx

# Stop and disable old (blue/green) service ------------------------------------
pretty_header "[${ACTIVE_SERVICE}] Stop: {{ deploy.service_name }}_${ACTIVE_SERVICE}.service"
systemctl stop "{{ deploy.service_name }}_${ACTIVE_SERVICE}.service"

pretty_header "[${ACTIVE_SERVICE}] Disable: {{ deploy.service_name }}_${ACTIVE_SERVICE}.service"
systemctl disable "{{ deploy.service_name }}_${ACTIVE_SERVICE}.service"

# Mark new (blue/green) service as active --------------------------------------
pretty_header "[${NEW_SERVICE}] Active: Set $NEW_SERVICE as active"
echo "$NEW_SERVICE" > "$ACTIVE_SERVICE_FILE_PATH"

# Cleanup ----------------------------------------------------------------------
pretty_header "Cleanup"
rm -rf "$HOME/{{ deploy.service_name }}"

pretty_header "Done"

exit 0
