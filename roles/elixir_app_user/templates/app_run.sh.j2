#!/bin/bash

# Script to quickly run a command against the active app

set -euo pipefail

# Helpers ----------------------------------------------------------------------
# Print echo messages in bold --------------------------------------------------
function bold_echo() {
  echo -e "\033[1m$1\033[0m"
}

# Determine active service -----------------------------------------------------
function determine_active_service() {
  ACTIVE_SERVICE_FILE_PATH="/etc/{{ elixir_app.name }}/active_service"
  ACTIVE_SERVICE=

  # If no active service was configured yet (i.e. first deploy) then use "BLUE"
  if [ ! -f "$ACTIVE_SERVICE_FILE_PATH" ]; then
    echo "BLUE" > "$ACTIVE_SERVICE_FILE_PATH"
  fi

  read -r ACTIVE_SERVICE < "$ACTIVE_SERVICE_FILE_PATH"
}
# HELPERS ----------------------------------------------------------------------

set -o allexport
. /etc/{{ elixir_app.name }}/{{ elixir_app.name }}_env
set +o allexport

determine_active_service

bold_echo "===> {{ elixir_app.name }}_$ACTIVE_SERVICE.service is set as active..."

if systemctl is-active --quiet "{{ elixir_app.name }}_$ACTIVE_SERVICE.service"; then
  bold_echo "===> {{ elixir_app.name }}_$ACTIVE_SERVICE.service is running..."
  bold_echo ""

  /srv/app/{{ elixir_app.name }}"_$ACTIVE_SERVICE"/bin/{{ elixir_app.name }} "$@"
else
 bold_echo "===> {{ elixir_app.name }}_$ACTIVE_SERVICE.service is NOT running..."
 bold_echo "===> ABORTED"
fi
