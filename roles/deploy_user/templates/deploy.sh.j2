#!/bin/bash

# Script to deploy the latest release (BLUE/GREEN aware)

set -euo pipefail

# Helpers ----------------------------------------------------------------------
# Print echo messages in bold --------------------------------------------------
function bold_echo() {
  echo -e "\033[1m$1\033[0m"
}

# Determine active service -----------------------------------------------------
function determine_active_service() {
  ACTIVE_SERVICE_FILE_PATH="/etc/{{ deploy.service_name }}/active_service"
  ACTIVE_SERVICE=

  # If no active service was configured yet (i.e. first deploy) then use "BLUE"
  if [ ! -f "$ACTIVE_SERVICE_FILE_PATH" ]; then
    echo "GREEN" > "$ACTIVE_SERVICE_FILE_PATH"
  fi

  read -r ACTIVE_SERVICE < "$ACTIVE_SERVICE_FILE_PATH"
}
# HELPERS ----------------------------------------------------------------------


# Set up our variables ---------------------------------------------------------
# Determine which (blue / green) is going to be active after deployment. -------
determine_active_service

NEW_ACTIVE_SERVICE=

if [ "$ACTIVE_SERVICE" = "BLUE" ]; then
  NEW_ACTIVE_SERVICE="GREEN"
else
  NEW_ACTIVE_SERVICE="BLUE"
fi

TMP_DIR="/tmp/{{ deploy.service_name }}"
APP_DIR="/srv/app/{{ deploy.service_name }}_$NEW_ACTIVE_SERVICE"

# Extract new version ----------------------------------------------------------
bold_echo "===> $NEW_ACTIVE_SERVICE | Extracting archive"
mkdir -p $TMP_DIR/{{ deploy.service_name }}
tar -xzf "$HOME/{{ deploy.service_name }}.tar.gz" -C $TMP_DIR/{{ deploy.service_name }}

bold_echo "===> $NEW_ACTIVE_SERVICE | Deploying new app version"
if [ ! -d "$APP_DIR" ]; then
  bold_echo "===> Creating $APP_DIR"
  mkdir -p $APP_DIR
  chown -R {{ deploy.service_name }}:{{ deploy.service_name }} $APP_DIR
fi

# copy all new files & make sure no longer existing files are deleted
rsync -a --delete \
      --chown={{ deploy.service_name }}:{{ deploy.service_name }} \
      $TMP_DIR/{{ deploy.service_name }}/ $APP_DIR

# Enable and start new (blue/green) service ------------------------------------
bold_echo "===> $NEW_ACTIVE_SERVICE | Enable: {{ deploy.service_name }}_$NEW_ACTIVE_SERVICE.service"
systemctl enable "{{ deploy.service_name }}_$NEW_ACTIVE_SERVICE.service"

bold_echo "===> $NEW_ACTIVE_SERVICE | Start: {{ deploy.service_name }}_$NEW_ACTIVE_SERVICE.service"
systemctl start "{{ deploy.service_name }}_$NEW_ACTIVE_SERVICE.service"

# Update NGINX config and reload -----------------------------------------------
bold_echo "===> $NEW_ACTIVE_SERVICE | NGINX: Link new service to sites-enabled"
ln -sf "/etc/nginx/sites-available/$NEW_ACTIVE_SERVICE.{{ deploy.nginx_vhost }}" \
       "/etc/nginx/sites-enabled/{{ deploy.nginx_vhost }}"

bold_echo "===> $NEW_ACTIVE_SERVICE | NGINX: Test & reload"
nginx -t
systemctl reload nginx

# Stop and disable old (blue/green) service ------------------------------------
bold_echo "===> $ACTIVE_SERVICE | Stop: {{ deploy.service_name }}_$ACTIVE_SERVICE.service"
systemctl stop "{{ deploy.service_name }}_$ACTIVE_SERVICE.service"

bold_echo "===> $ACTIVE_SERVICE | Disable: {{ deploy.service_name }}_$ACTIVE_SERVICE.service"
systemctl disable "{{ deploy.service_name }}_$ACTIVE_SERVICE.service"

# Mark new (blue/green) service as active --------------------------------------
bold_echo "===> $NEW_ACTIVE_SERVICE | Active: Set $NEW_ACTIVE_SERVICE as active"
echo "$NEW_ACTIVE_SERVICE" > "$ACTIVE_SERVICE_FILE_PATH"

# Cleanup ----------------------------------------------------------------------
bold_echo "===> Cleanup"
rm "$HOME/{{ deploy.service_name }}.tar.gz"
rm -r $TMP_DIR

bold_echo "===> Done"

exit 0
